myapp {
  server-mode = PRODUCTION

  entrypoint {
    graceful-termination {
      // [app終了時] すべての要求と接続が強制的に終了されるまでのタイムアウト
      hard-deadline = ${akka.http.server.request-timeout}
    }

    healthcheck.retry {
      attempt = 10
      delay = 1s
    }
  }

  // 特定の外部システムからのみリクエストを受け付けるエンドポイント
  private-internet.http {
    interface = "127.0.0.1"
    port = 9001
  }

  management.http {
    interface = "127.0.0.1"
    port = 9002
  }

}

akka {
  actor {
    provider = "cluster"
  }

  remote {
    artery {
      canonical {
        hostname = "127.0.0.1"
        port = 25520
      }
    }
  }

  cluster {
    seed-nodes = [
      "akka://MyAppSystem@127.0.0.1:25520"
    ]
    sharding.passivate-idle-entity-after = off

    # SBR を有効にする。
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    auto-down-unreachable-after = off
  }
}

akka.coordinated-shutdown {
  exit-jvm = on

  # CoordinatedShutdown のタイムアウトを上書きする
  phases {

    service-requests-done {
      timeout = ${myapp.entrypoint.graceful-termination.hard-deadline}
    }

  }
}

akka.management {
  http {
    hostname = "127.0.0.1"
    port = "8558"
  }
  health-checks {
    readiness-checks {
      jdbc-connection = "myapp.application.util.healthcheck.JDBCHealthCheck"
    }
  }
}
