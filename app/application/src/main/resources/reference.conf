// Application プロジェクト特有の設定はここに定義
myapp.application {

}

lerna.util.encryption {
  base64-key = "v5LCFG4V1CbJxxPg+WTd8w=="
  base64-iv = "46A7peszgqN3q/ww4k8lWg=="
}

akka.actor {
  provider = "cluster"
  allow-java-serialization = off
  serialization-bindings {
    "myapp.application.account.BankAccountBehavior$Command" = jackson-cbor # node間通信には可読性が必要ないため CBOR(バイナリ)形式
    "myapp.application.account.BankAccountBehavior$Reply" = jackson-cbor   # node間通信には可読性が必要ないため CBOR(バイナリ)形式
    "myapp.application.account.BankAccountBehavior$DomainEvent" = jackson-json
    "myapp.application.account.BankAccountBehavior$Account" = jackson-json
  }
}

akka.extensions = [
  "akka.persistence.Persistence",
]
akka.persistence {
  journal {
    auto-start-journals = [
      "akka-entity-replication.raft.persistence.cassandra-tenant-a.journal",
      "akka-entity-replication.raft.persistence.cassandra-tenant-b.journal",
      "akka-entity-replication.eventsourced.persistence.cassandra-tenant-a.journal",
      "akka-entity-replication.eventsourced.persistence.cassandra-tenant-b.journal",
    ]
  }

  snapshot-store {
    auto-start-snapshot-stores = [
      "akka-entity-replication.raft.persistence.cassandra-tenant-a.snapshot",
      "akka-entity-replication.raft.persistence.cassandra-tenant-b.snapshot",
    ]
  }
}

// 各 node でいずれか一つだけ設定する
// akka.cluster.roles.0 = "replica-group-1"
// akka.cluster.roles.0 = "replica-group-2"
// akka.cluster.roles.0 = "replica-group-3"

lerna.akka.entityreplication.raft.multi-raft-roles = [
  "replica-group-1",
  "replica-group-2",
  "replica-group-3",
]

// The settings for Cassandra persistence plugin to handle command side
// You can set anything name for the root key of these settings
akka-entity-replication.raft.persistence.cassandra = ${akka.persistence.cassandra} {
  // Profile to use.
  // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
  read-profile = "akka-entity-replication-profile"
  write-profile = "akka-entity-replication-profile"

  journal {

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the journal
    keyspace = "entity_replication"
  }

  snapshot {

    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-snapshot-profile"
    write-profile = "akka-entity-replication-snapshot-profile"

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the snapshot store
    keyspace = "entity_replication_snapshot"

    // Number load attempts when recovering from the latest snapshot fails yet older snapshot files are available.
    // But old snapshots should be ignored because akka-entity-replication uses only the latest snapshot.
    max-load-attempts = 1
  }
}

akka-entity-replication.raft.persistence.cassandra-tenant-a  = ${akka-entity-replication.raft.persistence.cassandra} {
  journal.keyspace = "entity_replication_tenant_a"
  snapshot.keyspace = "entity_replication_snapshot_tenant_a"
}
akka-entity-replication.raft.persistence.cassandra-tenant-b = ${akka-entity-replication.raft.persistence.cassandra} {
  journal.keyspace = "entity_replication_tenant_b"
  snapshot.keyspace = "entity_replication_snapshot_tenant_b"
}

// The settings for Cassandra persistence plugin to handle query side
// You can set anything name for the root key of these settings
akka-entity-replication.eventsourced.persistence.cassandra = ${akka.persistence.cassandra} {
  // Profile to use.
  // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
  read-profile = "akka-entity-replication-profile"
  write-profile = "akka-entity-replication-profile"

  journal {

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the journal
    keyspace = "raft_commited_event"
  }
}

akka-entity-replication.eventsourced.persistence.cassandra-tenant-a  = ${akka-entity-replication.eventsourced.persistence.cassandra} {
  journal.keyspace = "raft_commited_event_tenant_a"
}
akka-entity-replication.eventsourced.persistence.cassandra-tenant-b = ${akka-entity-replication.eventsourced.persistence.cassandra} {
  journal.keyspace = "raft_commited_event_tenant_b"
}

// You can find reference configuration at
// https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/
// see also: https://doc.akka.io/docs/akka-persistence-cassandra/1.0.3/configuration.html#cassandra-driver-configuration
datastax-java-driver {

  // The contact points to use for the initial connection to the cluster.
  // basic.contact-points = ["127.0.0.1:9042"]

  // To limit the Cassandra hosts this plugin connects with to a specific datacenter.
  basic.load-balancing-policy.local-datacenter = "datacenter1"

  advanced.auth-provider {
    class = PlainTextAuthProvider
    username = "cassandra"
    password = "cassandra"
  }

  profiles {

    // It is recommended to set this value.
    // For more details see https://doc.akka.io/docs/akka-persistence-cassandra/1.0.3/configuration.html#cassandra-driver-configuration
    advanced.reconnect-on-init = true

    akka-entity-replication-profile {
      basic.request {
        // Important: akka-entity-replication recommends quorum based consistency level to remain data consistency
        consistency = LOCAL_QUORUM
        // the journal does not use any counters or collections
        default-idempotence = true
      }
    }

    akka-entity-replication-snapshot-profile {
      basic.request {
        // Important: akka-entity-replication recommends quorum based consistency level to remain data consistency
        consistency = LOCAL_QUORUM
        // the snapshot store does not use any counters or collections
        default-idempotence = true
      }
    }
  }
}
