// Application プロジェクト特有の設定はここに定義
myapp.application {

  projection.deposit {

    # RDB を確認する間隔
    polling-interval = 5s

    # 一度のポーリングで取得するデータ量
    # このデータ量を増やすと DB がクエリを処理する回数を減らせますが、メモリ使用量が増えるため、
    # 増やしすぎてメモリが枯渇しないよう注意してください
    polling-batch-size = 100

    # Entity へのコマンド送信の最大スループット（コマンド数/秒）
    max-command-throughput-per-sec = 100

    # Entity 群へ同時に送信するコマンド数
    command-parallelism = 3
  }

  #
  # 送金オーケストレータ
  #
  # 2種類の永続化がある。
  # それぞれの種類で journal, snapshot 向けの Plugin 設定がある。
  #
  remittance-orchestrator {

    # 送金オーケストレータごとのイベントやスナップショットを保存するために使用される
    persistence = ${akka.persistence.cassandra} {
      read-profile = "remittance-orchestrator-profile"
      write-profile = "remittance-orchestrator-profile"
      journal {
        keyspace = "remittance"
      }
      # Snapshot は使用しないが、重要項目だけ設定してある
      snapshot {
        read-profile = "remittance-orchestrator-snapshot-profile"
        write-profile = "remittance-orchestrator-snapshot-profile"
        keyspace = "remittance_snapshot"
        # 自動で作成されることを明示的に防止する
        keyspace-autocreate = false
        tables-autocreate = false
      }
    }
    persistence-tenant-a = ${myapp.application.remittance-orchestrator.persistence} {
      journal.keyspace = "remittance_tenant_a"
      snapshot.keyspace = "remittance_snapshot_tenant_a"
    }
    persistence-tenant-b = ${myapp.application.remittance-orchestrator.persistence} {
      journal.keyspace = "remittance_tenant_b"
      snapshot.keyspace = "remittance_snapshot_tenant_b"
    }

    # Akka Cluster Sharding の RememberEntities の状態を保存するために使用される
    sharding-state-persistence = ${akka.persistence.cassandra} {
      read-profile = "remittance-orchestrator-sharding-state-profile"
      write-profile = "remittance-orchestrator-sharding-state-profile"
      journal {
        keyspace = "remittance_sharding_state"
      }
      snapshot {
        read-profile = "remittance-orchestrator-sharding-state-snapshot-profile"
        write-profile = "remittance-orchestrator-sharding-state-snapshot-profile"
        keyspace = "remittance_sharding_state_snapshot"
      }
    }
    sharding-state-persistence-tenant-a = ${myapp.application.remittance-orchestrator.sharding-state-persistence} {
      journal.keyspace = "remittance_sharding_state_tenant_a"
      snapshot.keyspace = "remittance_sharding_state_snapshot_tenant_a"
    }
    sharding-state-persistence-tenant-b = ${myapp.application.remittance-orchestrator.sharding-state-persistence} {
      journal.keyspace = "remittance_sharding_state_tenant_b"
      snapshot.keyspace = "remittance_sharding_state_snapshot_tenant_b"
    }

  }

  util.healthcheck.jdbc {
    interval = 5s
    healthy-threshold = 1
    unhealthy-threshold = 1
    timeout = 500ms
  }

}

lerna.util.encryption {
  base64-key = "v5LCFG4V1CbJxxPg+WTd8w=="
  base64-iv = "46A7peszgqN3q/ww4k8lWg=="
}

akka.actor {
  provider = "cluster"
  allow-java-serialization = off
  serialization-bindings {
    # Command (node間通信) には可読性が必要ないため CBOR(バイナリ)形式を用いる。
    # Event,State には可読性が必要なため、JSON 形式を用いる。
    "myapp.application.account.BankAccountBehavior$Command" = jackson-cbor
    "myapp.application.account.BankAccountBehavior$Reply" = jackson-cbor
    "myapp.application.account.BankAccountBehavior$DomainEvent" = jackson-json
    "myapp.application.account.BankAccountBehavior$Account" = jackson-json
    "myapp.application.account.RemittanceOrchestratorBehavior$Command" = jackson-cbor
    "myapp.application.account.RemittanceOrchestratorBehavior$Reply" = jackson-cbor
    "myapp.application.account.RemittanceOrchestratorBehavior$DomainEvent" = jackson-json
    "myapp.application.util.healthcheck.JDBCHealthCheckService$Command" = jackson-json
    "myapp.application.util.healthcheck.JDBCHealthCheckService$GetCurrentStatusReply" = jackson-json
  }
}

akka.serialization.jackson {
  jackson-modules += "myapp.application.serialization.utility.tenant.AppTenantJacksonModule"
  jackson-modules += "myapp.application.serialization.adapter.account.TransactionIdJacksonModule"
}


akka.extensions = [
  "akka.persistence.Persistence",
]
akka.persistence {
  journal {
    auto-start-journals = [
      "akka-entity-replication.raft.persistence.cassandra-tenant-a.journal",
      "akka-entity-replication.raft.persistence.cassandra-tenant-b.journal",
      "akka-entity-replication.eventsourced.persistence.cassandra-tenant-a.journal",
      "akka-entity-replication.eventsourced.persistence.cassandra-tenant-b.journal",
      "myapp.application.remittance-orchestrator.persistence-tenant-a.journal",
      "myapp.application.remittance-orchestrator.persistence-tenant-b.journal",
      "myapp.application.remittance-orchestrator.sharding-state-persistence-tenant-a.journal",
      "myapp.application.remittance-orchestrator.sharding-state-persistence-tenant-b.journal",
    ]
  }

  snapshot-store {
    auto-start-snapshot-stores = [
      "akka-entity-replication.raft.persistence.cassandra-tenant-a.snapshot",
      "akka-entity-replication.raft.persistence.cassandra-tenant-b.snapshot",
      "akka-entity-replication.eventsourced.persistence.cassandra-tenant-a.snapshot",
      "akka-entity-replication.eventsourced.persistence.cassandra-tenant-b.snapshot",
      "myapp.application.remittance-orchestrator.persistence-tenant-a.snapshot",
      "myapp.application.remittance-orchestrator.persistence-tenant-b.snapshot",
      "myapp.application.remittance-orchestrator.sharding-state-persistence-tenant-a.snapshot",
      "myapp.application.remittance-orchestrator.sharding-state-persistence-tenant-b.snapshot",
    ]
  }
}

// 各 node でいずれか一つだけ設定する
// akka.cluster.roles.0 = "replica-group-1"
// akka.cluster.roles.0 = "replica-group-2"
// akka.cluster.roles.0 = "replica-group-3"

lerna.akka.entityreplication.raft.multi-raft-roles = [
  "replica-group-1",
  "replica-group-2",
  "replica-group-3",
]

// The settings for Cassandra persistence plugin to handle command side
// You can set anything name for the root key of these settings
akka-entity-replication.raft.persistence.cassandra = ${akka.persistence.cassandra} {
  // Profile to use.
  // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
  read-profile = "akka-entity-replication-profile"
  write-profile = "akka-entity-replication-profile"

  journal {

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the journal
    keyspace = "entity_replication"
  }

  query {
    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-profile"
  }

  snapshot {

    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-snapshot-profile"
    write-profile = "akka-entity-replication-snapshot-profile"

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the snapshot store
    keyspace = "entity_replication_snapshot"

    // Number load attempts when recovering from the latest snapshot fails yet older snapshot files are available.
    // But old snapshots should be ignored because akka-entity-replication uses only the latest snapshot.
    max-load-attempts = 1
  }
}

akka-entity-replication.raft.persistence.cassandra-tenant-a  = ${akka-entity-replication.raft.persistence.cassandra} {
  journal.keyspace = "entity_replication_tenant_a"
  snapshot.keyspace = "entity_replication_snapshot_tenant_a"
}
akka-entity-replication.raft.persistence.cassandra-tenant-b = ${akka-entity-replication.raft.persistence.cassandra} {
  journal.keyspace = "entity_replication_tenant_b"
  snapshot.keyspace = "entity_replication_snapshot_tenant_b"
}

// The settings for Cassandra persistence plugin to handle query side
// You can set anything name for the root key of these settings
akka-entity-replication.eventsourced.persistence.cassandra = ${akka.persistence.cassandra} {
  // Profile to use.
  // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
  read-profile = "akka-entity-replication-profile"
  write-profile = "akka-entity-replication-profile"

  journal {

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the journal
    keyspace = "raft_commited_event"

    event-adapters {
      // Tagging to allow some RaftActor(Shard) to handle individually committed events together(No need to change)
      bank-account-tagging = "myapp.application.account.BankAccountEventAdapter"
    }
    event-adapter-bindings {
      // bank-account-tagging takes events which mixins BankAccount$DomainEvent
      "myapp.application.account.BankAccountBehavior$DomainEvent" = bank-account-tagging
    }
  }

  query {
    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-profile"
  }

  snapshot {
    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-snapshot-profile"
    write-profile = "akka-entity-replication-snapshot-profile"

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["datacenter1:1"]

    // Name of the keyspace to be used by the snapshot store
    keyspace = "raft_commited_event_snapshot"

    // Number load attempts when recovering from the latest snapshot fails yet older snapshot files are available.
    // But old snapshots should be ignored because akka-entity-replication uses only the latest snapshot.
    max-load-attempts = 1
  }

}

akka-entity-replication.eventsourced.persistence.cassandra-tenant-a  = ${akka-entity-replication.eventsourced.persistence.cassandra} {
  journal.keyspace = "raft_commited_event_tenant_a"
  snapshot.keyspace = "raft_commited_event_snapshot_tenant_a"
}
akka-entity-replication.eventsourced.persistence.cassandra-tenant-b = ${akka-entity-replication.eventsourced.persistence.cassandra} {
  journal.keyspace = "raft_commited_event_tenant_b"
  snapshot.keyspace = "raft_commited_event_snapshot_tenant_b"
}

// You can find reference configuration at
// https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/
// see also: https://doc.akka.io/docs/akka-persistence-cassandra/1.0.3/configuration.html#cassandra-driver-configuration
datastax-java-driver {

  // The contact points to use for the initial connection to the cluster.
  // basic.contact-points = ["127.0.0.1:9042"]

  // To limit the Cassandra hosts this plugin connects with to a specific datacenter.
  basic.load-balancing-policy.local-datacenter = "datacenter1"

  advanced.auth-provider {
    class = PlainTextAuthProvider
    username = "cassandra"
    password = "cassandra"
  }

  // It is recommended to set this value.
  // For more details see https://doc.akka.io/docs/akka-persistence-cassandra/1.0.3/configuration.html#cassandra-driver-configuration
  advanced.reconnect-on-init = true

  # 合計8つのセッションが作成される。
  #  - BankAccountApplication
  #    (2つ/テナント x 2テナント) = 4つ
  #  - RemittanceApplication
  #    (2つ/テナント x 2テナント) = 4つ
  advanced.session-leak.threshold = 8

  profiles {

    akka-entity-replication-profile {
      basic.request {
        // Important: akka-entity-replication recommends quorum based consistency level to remain data consistency
        consistency = LOCAL_QUORUM
        // the journal does not use any counters or collections
        default-idempotence = true
      }
    }

    akka-entity-replication-snapshot-profile {
      basic.request {
        // Important: akka-entity-replication recommends quorum based consistency level to remain data consistency
        consistency = LOCAL_QUORUM
        // the snapshot store does not use any counters or collections
        default-idempotence = true
      }
    }

    #
    # 送金オーケストレータ向け DataStax Java Driver Profile
    #
    # 2種類の永続化が必要であり、それぞれの種類で journal, snapshot 向けのプロファイルを使用する。
    #  - RemittanceOrchestrator Actor の イベントとスナップショットを保存する
    #    - remittance-orchestrator-snapshot-profile
    #    - remittance-orchestrator-snapshot-profile
    #  - Akka Cluster Sharding の RememberEntities の状態を保存する
    #    - remittance-orchestrator-sharding-state-profile
    #    - remittance-orchestrator-sharding-state-snapshot-profile
    #
    remittance-orchestrator-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile} {
      basic.request {
        consistency = LOCAL_QUORUM
      }
    }
    remittance-orchestrator-snapshot-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile} {
      basic.request {
        consistency = LOCAL_QUORUM
      }
    }
    remittance-orchestrator-sharding-state-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile} {
      basic.request {
        consistency = LOCAL_QUORUM
      }
    }
    remittance-orchestrator-sharding-state-snapshot-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile} {
      basic.request {
        consistency = LOCAL_QUORUM
      }
    }

  }
}
